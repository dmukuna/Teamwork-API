{"version":3,"sources":["../../api/v1/controllers/comment.js"],"names":["findAllComments","cmnt","saveGifComment","saveArticleComment","findOneArticle","artcl","findOneGif","gf","createCommentController","req","res","next","checkFields","body","comment","status","json","error","commentText","commentCreatedOn","format","authorId","user","sub","then","rows","commentId","Math","max","map","row","id","params","gifId","parseInt","title","data","message","createdOn","gifTitle","userId","articleId","article","articleText","articleTitle","Error"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport cmnt from '../models/comment';\r\nimport gf from '../models/gif';\r\nimport artcl from '../models/article';\r\n\r\nconst { findAllComments, saveGifComment, saveArticleComment } = cmnt;\r\nconst { findOneArticle } = artcl;\r\nconst { findOneGif } = gf;\r\n\r\nconst createCommentController = (req, res, next) => {\r\n  const checkFields = !req.body.comment || req.body.comment === '';\r\n\r\n  if (checkFields) {\r\n    res.status(400).json({\r\n      status: 'error',\r\n      error: 'Invalid request',\r\n    });\r\n  } else {\r\n    const { comment } = req.body;\r\n    const commentText = comment;\r\n    const commentCreatedOn = moment().format('YYYY-MM-DD HH:mm:ss');\r\n    const authorId = req.user.sub;\r\n    findAllComments()\r\n      .then((rows) => {\r\n        const commentId = Math.max(...rows.map(row => row.id + 1), 1);\r\n\r\n        if (req.params.gifId) {\r\n          const gifId = parseInt(req.params.gifId, 10);\r\n          findOneGif([gifId])\r\n            .then((row) => {\r\n              const { title } = row;\r\n\r\n              saveGifComment([commentId, comment, commentCreatedOn, authorId, gifId])\r\n                .then(() => {\r\n                  res.status(201).json({\r\n                    status: 'success',\r\n                    data: {\r\n                      message: 'Comment successfully created',\r\n                      createdOn: commentCreatedOn,\r\n                      gifTitle: title,\r\n                      comment: commentText,\r\n                      userId: authorId,\r\n                    },\r\n                  });\r\n                })\r\n                .catch(() => {\r\n                  res.status(500).json({\r\n                    status: 'error',\r\n                    error: 'Failed to save comment',\r\n                  });\r\n                });\r\n            })\r\n            .catch(() => {\r\n              res.status(500).json({\r\n                status: 'error',\r\n                error: 'Failed to get GIF image',\r\n              });\r\n            });\r\n        } else if (req.params.articleId) {\r\n          const articleId = parseInt(req.params.articleId, 10);\r\n          findOneArticle([articleId])\r\n            .then((row) => {\r\n              const { title, article } = row;\r\n              const articleText = article;\r\n\r\n              saveArticleComment([commentId, comment, commentCreatedOn, authorId, articleId])\r\n                .then(() => {\r\n                  res.status(201).json({\r\n                    status: 'success',\r\n                    data: {\r\n                      message: 'Comment successfully created',\r\n                      id: commentId,\r\n                      createdOn: commentCreatedOn,\r\n                      articleTitle: title,\r\n                      article: articleText,\r\n                      comment: commentText,\r\n                      userId: authorId,\r\n                    },\r\n                  });\r\n                })\r\n                .catch(() => {\r\n                  res.status(500).json({\r\n                    status: 'error',\r\n                    error: 'Failed to save Article comment',\r\n                  });\r\n                });\r\n            })\r\n            .catch(() => {\r\n              res.status(500).json({\r\n                status: 'error',\r\n                error: 'Failed to get Article',\r\n              });\r\n            });\r\n        } else {\r\n          res.status(400).json({\r\n            status: 'error',\r\n            Error: 'Invalid request',\r\n          });\r\n        }\r\n      })\r\n      .catch(() => {\r\n        res.status(500).json({\r\n          status: 'error',\r\n          Error: 'Failed to get comments',\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport default createCommentController;\r\n"],"file":"comment.js"}