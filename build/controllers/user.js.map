{"version":3,"sources":["../../api/v1/controllers/user.js"],"names":["findOne","user","save","hashPassword","helper","comparePassword","isValidEmail","generateToken","signUp","req","res","next","body","firstName","lastName","email","password","gender","jobRole","department","address","checkEmail","trim","checkFields","status","json","Error","ID","storedEmail","toLowerCase","hashedPassword","values","toUpperCase","then","data","message","UserID","err","error","login","cleanedEmail","row","id","hashedpassword","jobrole","verifyPwd","uJobrole","userObj","sub","role","tokenValue","token","UserId"],"mappings":"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","sourcesContent":["import uuidv1 from 'uuid/v1';\r\nimport user from '../models/user';\r\nimport helper from './helper';\r\n\r\nconst { findOne, save } = user;\r\nconst {\r\n  hashPassword, comparePassword, isValidEmail, generateToken,\r\n} = helper;\r\n\r\nconst signUp = (req, res, next) => {\r\n  const {\r\n    firstName, lastName, email, password, gender, jobRole, department, address,\r\n  } = req.body;\r\n\r\n  const checkEmail = isValidEmail(email.trim());\r\n  const checkFields = (firstName && lastName && email && password\r\n      && gender && jobRole && department && address\r\n  );\r\n\r\n  if (!checkFields) {\r\n    res.status(400).json({\r\n      status: 'error',\r\n      Error: 'All fields are required',\r\n    });\r\n  } else if (!checkEmail) {\r\n    res.status(400).json({\r\n      status: 'error',\r\n      Error: 'Please provide a valid email',\r\n    });\r\n  } else {\r\n    const ID = uuidv1();\r\n    const storedEmail = email.trim().toLowerCase();\r\n    const hashedPassword = hashPassword(password.trim());\r\n    const values = [\r\n      ID, firstName.trim(), lastName.trim(), storedEmail, hashedPassword,\r\n      gender.trim(), jobRole.trim().toUpperCase(), department.trim(), address.trim(),\r\n    ];\r\n\r\n    save(values)\r\n      .then(() => {\r\n        res.status(201).json({\r\n          status: 'success',\r\n          data: {\r\n            message: 'User account successfully created',\r\n            UserID: ID,\r\n          },\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        res.status(500).json({\r\n          status: 'error',\r\n          error: 'Failed to save user',\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nconst login = (req, res, next) => {\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password || email === '' || password === '') {\r\n    res.status(400).json({\r\n      status: 'error',\r\n      error: 'Email and password fields are required',\r\n    });\r\n  } else {\r\n    const cleanedEmail = email.trim();\r\n    findOne([cleanedEmail])\r\n      .then((row) => {\r\n        const {\r\n          id, hashedpassword, jobrole,\r\n        } = row;\r\n        const verifyPwd = comparePassword(password.trim(), hashedpassword);\r\n        if (!verifyPwd) {\r\n          res.status(400).json({\r\n            status: 'error',\r\n            error: 'Incorrect password',\r\n          });\r\n        } else {\r\n          const uJobrole = jobrole.toUpperCase();\r\n          const userObj = {\r\n            sub: id,\r\n            role: uJobrole,\r\n          };\r\n          const tokenValue = generateToken(userObj);\r\n          res.status(200).json({\r\n            status: 'success',\r\n            data: {\r\n              token: tokenValue,\r\n              UserId: id,\r\n            },\r\n          });\r\n        }\r\n      })\r\n      .catch(() => {\r\n        res.status(400).json({\r\n          status: 'error',\r\n          error: 'Failed to get user',\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport { signUp, login };\r\n"],"file":"user.js"}