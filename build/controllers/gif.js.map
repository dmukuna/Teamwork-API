{"version":3,"sources":["../../api/v1/controllers/gif.js"],"names":["findOneGif","gf","findAllGifs","saveGif","deleteGif","findGifComments","comnt","createGifController","req","res","next","title","body","status","json","Error","file","url","URL","gifPublicId","public_id","createdOn","format","authorId","user","sub","then","rows","gifId","Math","max","map","row","id","values","gifCreatedOn","gifTitle","gifAuthorId","data","message","imageURL","PublicId","error","getGifsController","length","gifArr","forEach","g","gifurl","gifpublicid","createdon","authorid","push","getGifController","params","parseInt","paramId","commentArr","commentRow","comment","gifComment","gifCommentAuthorId","commentId","CommentAuthorId","Id","comments","deleteGifController","idParam","cld","v2","uploader","destroy","err"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport gf from '../models/gif';\r\nimport comnt from '../models/comment';\r\nimport cld from '../config/cloudinaryConfig';\r\n\r\nconst {\r\n  findOneGif, findAllGifs, saveGif, deleteGif,\r\n} = gf;\r\nconst { findGifComments } = comnt;\r\n\r\nconst createGifController = (req, res, next) => {\r\n  const {\r\n    title,\r\n  } = req.body;\r\n\r\n  if (title === '' || !title) {\r\n    res.status(400).json({\r\n      status: 'error',\r\n      Error: 'The title is required',\r\n    });\r\n  } else if (!req.file || req.file.url === '') {\r\n    res.status(400).json({\r\n      status: 'error',\r\n      Error: 'A GIF image is required',\r\n    });\r\n  } else {\r\n    const URL = req.file.url;\r\n    const gifPublicId = req.file.public_id;\r\n    const createdOn = moment().format('YYYY-MM-DD HH:mm:ss');\r\n    const authorId = req.user.sub;\r\n\r\n    findAllGifs()\r\n      .then((rows) => {\r\n        const gifId = Math.max(...rows.map(row => row.id + 1), 1);\r\n\r\n        const values = [gifId, title, URL, gifPublicId, createdOn, authorId];\r\n\r\n        saveGif(values)\r\n          .then(() => {\r\n            const gifCreatedOn = createdOn;\r\n            const gifTitle = title;\r\n            const gifAuthorId = authorId;\r\n            res.status(201).json({\r\n              status: 'success',\r\n              data: {\r\n                message: 'Gif image successfully posted',\r\n                id: gifId,\r\n                createdOn: gifCreatedOn,\r\n                title: gifTitle,\r\n                imageURL: URL,\r\n                PublicId: gifPublicId,\r\n                authorId: gifAuthorId,\r\n              },\r\n            });\r\n          })\r\n          .catch(() => {\r\n            res.status(500).json({\r\n              status: 'error',\r\n              error: 'Failed to save GIF image',\r\n            });\r\n          });\r\n      })\r\n      .catch(() => {\r\n        res.status(500).json({\r\n          status: 'error',\r\n          error: 'Failed to get GIF image rows',\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nconst getGifsController = (req, res, next) => {\r\n  findAllGifs()\r\n    .then((rows) => {\r\n      if (rows.length === 0) {\r\n        res.status(400).json({\r\n          status: 'error',\r\n          Error: 'There is no GIF post yet',\r\n        });\r\n      }\r\n      const gifArr = [];\r\n      rows.forEach((g) => {\r\n        const {\r\n          id, title, gifurl, gifpublicid, createdon, authorid,\r\n        } = g;\r\n        const gifCreatedOn = createdon;\r\n        const gifTitle = title;\r\n        const gifAuthorId = authorid;\r\n        const values = {\r\n          gifId: id,\r\n          createdOn: gifCreatedOn,\r\n          title: gifTitle,\r\n          imageURL: gifurl,\r\n          PublicId: gifpublicid,\r\n          authorId: gifAuthorId,\r\n        };\r\n        gifArr.push(values);\r\n      });\r\n      res.status(200).json({\r\n        status: 'success',\r\n        data: gifArr,\r\n      });\r\n    })\r\n    .catch(() => {\r\n      res.status(500).json({\r\n        status: 'error',\r\n        error: 'Failed to get GIF image rows',\r\n      });\r\n    });\r\n};\r\n\r\nconst getGifController = (req, res, next) => {\r\n  if (!req.params.gifId || req.params.gifId === '' || typeof (parseInt(req.params.gifId, 10)) !== 'number') {\r\n    res.status(400).json({\r\n      status: 'error',\r\n      Error: 'Invalid request',\r\n    });\r\n  } else {\r\n    const paramId = parseInt(req.params.gifId, 10);\r\n\r\n    findOneGif([paramId])\r\n      .then((row) => {\r\n        const {\r\n          id, title, gifurl, gifpublicid, createdon, authorid,\r\n        } = row;\r\n        const gifId = id;\r\n        const gifCreatedOn = createdon;\r\n        const gifTitle = title;\r\n        const gifAuthorId = authorid;\r\n\r\n        findGifComments([paramId])\r\n          .then((rows) => {\r\n            const commentArr = [];\r\n\r\n            rows.forEach((commentRow) => {\r\n              const { comment } = commentRow;\r\n              const gifComment = comment;\r\n              const gifCommentAuthorId = commentRow.authorid;\r\n              const values = {\r\n                commentId: commentRow.id,\r\n                comment: gifComment,\r\n                CommentAuthorId: gifCommentAuthorId,\r\n              };\r\n              commentArr.push(values);\r\n            });\r\n            res.status(200).json({\r\n              status: 'success',\r\n              data: {\r\n                Id: gifId,\r\n                createdOn: gifCreatedOn,\r\n                title: gifTitle,\r\n                imageURL: gifurl,\r\n                PublicId: gifpublicid,\r\n                authorId: gifAuthorId,\r\n                comments: commentArr,\r\n              },\r\n            });\r\n          })\r\n          .catch(() => {\r\n            res.status(500).json({\r\n              status: 'error',\r\n              error: 'Failed to get GIF comment rows',\r\n            });\r\n          });\r\n      })\r\n      .catch(() => {\r\n        res.status(500).json({\r\n          status: 'error',\r\n          Error: 'Failed to get gif row',\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nconst deleteGifController = (req, res, next) => {\r\n  if (!req.params.gifId || req.params.gifId === '' || typeof (parseInt(req.params.gifId, 10)) !== 'number') {\r\n    res.status(400).json({\r\n      status: 'error',\r\n      Error: 'Invalid request',\r\n    });\r\n  } else {\r\n    const idParam = parseInt(req.params.gifId, 10);\r\n    findOneGif([idParam])\r\n      .then(() => {\r\n        deleteGif([idParam])\r\n        .then((row) => {\r\n          const {\r\n            id, title, gifurl, gifpublicid, createdon, authorid,\r\n          } = row;\r\n          const gifCreatedOn = createdon;\r\n          const gifTitle = title;\r\n          const gifAuthorId = authorid;\r\n  \r\n          cld.v2.uploader.destroy(gifpublicid)\r\n            .then(() => {\r\n              res.status(200).json({\r\n                status: 'success',\r\n                data: {\r\n                  message: 'GIF post successfully deleted',\r\n                  gifId: id,\r\n                  createdOn: gifCreatedOn,\r\n                  title: gifTitle,\r\n                  imageURL: gifurl,\r\n                  PublicId: gifpublicid,\r\n                  authorId: gifAuthorId,\r\n                },\r\n              });\r\n            })\r\n            .catch((err) => {\r\n              throw err;\r\n            });\r\n        })\r\n        .catch(() => {\r\n          res.status(500).json({\r\n            status: 'error',\r\n            Error: 'Failed to delete GIF image post',\r\n          });\r\n        });\r\n      })\r\n      .catch(() => {\r\n        res.status(500).json({\r\n          status: 'error',\r\n          Error: 'Failed to get GIF image post',\r\n        });\r\n      })\r\n  }\r\n};\r\n\r\nexport {\r\n  createGifController, getGifsController, getGifController, deleteGifController,\r\n};"],"file":"gif.js"}