{"version":3,"sources":["../api/v1/server.js"],"names":["dotenv","config","normalizePort","val","port","parseInt","process","env","PORT","app","set","server","http","createServer","address","errorHandler","error","syscall","bind","code","console","exit","on","log","listen"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AAHA;AAKAA,mBAAOC,MAAP;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,GAAD,EAAS;AAC7B,MAAMC,IAAI,GAAGC,QAAQ,CAACF,GAAD,EAAM,EAAN,CAArB;;AAEA,MAAI,OAAQC,IAAR,KAAkB,QAAtB,EAAgC;AAC9B,WAAOD,GAAP;AACD;;AACD,MAAIC,IAAI,IAAI,CAAZ,EAAe;AACb,WAAOA,IAAP;AACD;;AACD,SAAO,KAAP;AACD,CAVD;;AAYA,IAAMA,IAAI,GAAGF,aAAa,CAACI,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,MAArB,CAA1B;AAAuD;;AAEvDC,gBAAIC,GAAJ,CAAQ,MAAR,EAAgBN,IAAhB;;AAEA,IAAMO,MAAM,GAAGC,iBAAKC,YAAL,CAAkBJ,eAAlB,CAAf;;AACA,IAAMK,OAAO,GAAGH,MAAM,CAACG,OAAP,EAAhB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9B,MAAIA,KAAK,CAACC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,MAAME,IAAI,GAAG,OAAOJ,OAAP,KAAmB,QAAnB,mBAAuCA,OAAvC,oBAA4DV,IAA5D,CAAb;;AACA,UAAQY,KAAK,CAACG,IAAd;AACE,SAAK,QAAL;AACEC,MAAAA,OAAO,CAACJ,KAAR,WAAiBE,IAAjB;AACAZ,MAAAA,OAAO,CAACe,IAAR,CAAa,CAAb;AACA;;AACF,SAAK,YAAL;AACED,MAAAA,OAAO,CAACJ,KAAR,WAAiBE,IAAjB;AACAZ,MAAAA,OAAO,CAACe,IAAR,CAAa,CAAb;AACA;;AACF;AACE,YAAML,KAAN;AAVJ;AAYD,CAlBD;;AAoBAL,MAAM,CAACW,EAAP,CAAU,OAAV,EAAmBP,YAAnB;AACAJ,MAAM,CAACW,EAAP,CAAU,WAAV,EAAuB,YAAM;AAC3B,MAAMJ,IAAI,GAAG,OAAOJ,OAAP,KAAmB,QAAnB,kBAAsCA,OAAtC,mBAA0DV,IAA1D,CAAb;AACAgB,EAAAA,OAAO,CAACG,GAAR,wBAA4BL,IAA5B;AACD,CAHD;AAKAP,MAAM,CAACa,MAAP,CAAcpB,IAAd;eAEeO,M","sourcesContent":["/* eslint-disable no-console */\r\nimport http from 'http';\r\nimport dotenv from 'dotenv';\r\nimport app from './app';\r\n\r\ndotenv.config();\r\n\r\nconst normalizePort = (val) => {\r\n  const port = parseInt(val, 10);\r\n\r\n  if (typeof (port) !== 'number') {\r\n    return val;\r\n  }\r\n  if (port >= 0) {\r\n    return port;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst port = normalizePort(process.env.PORT || '3000');;\r\n\r\napp.set('port', port);\r\n\r\nconst server = http.createServer(app);\r\nconst address = server.address();\r\n\r\nconst errorHandler = (error) => {\r\n  if (error.syscall !== 'listen') {\r\n    throw error;\r\n  }\r\n\r\n  const bind = typeof address === 'string' ? `pipe  ${address}` : `port: ${port}`;\r\n  switch (error.code) {\r\n    case 'EACCES':\r\n      console.error(`${bind} requires elevated privileges.`);\r\n      process.exit(1);\r\n      break;\r\n    case 'EADDRINUSE':\r\n      console.error(`${bind} is already in use.`);\r\n      process.exit(1);\r\n      break;\r\n    default:\r\n      throw error;\r\n  }\r\n};\r\n\r\nserver.on('error', errorHandler);\r\nserver.on('listening', () => {\r\n  const bind = typeof address === 'string' ? `pipe ${address}` : `port ${port}`;\r\n  console.log(`Listening on ${bind}`);\r\n});\r\n\r\nserver.listen(port);\r\n\r\nexport default server;\r\n"],"file":"server.js"}