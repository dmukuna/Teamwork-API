{"version":3,"sources":["../../api/v1/test/user.spec.js"],"names":["dotenv","config","process","env","NODE_ENV","deleteAllUsers","User","save","hashPassword","helper","generateToken","chai","use","chaiHttp","describe","id1","obj","sub","role","token","after","it","values","objt","autht","tokent","user1","firstName","lastName","email","password","gender","jobRole","department","address","request","server","post","set","send","res","to","have","status","body","be","an","equals","user2","user3","user4","id2","before","user6","user7","user8","user9","user10"],"mappings":"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","sourcesContent":["import chai, { expect } from 'chai';\nimport chaiHttp from 'chai-http';\nimport 'chai/register-should';\nimport uuidv1 from 'uuid/v1';\nimport dotenv from 'dotenv';\nimport server from '../server';\nimport User from '../models/user';\nimport helper from '../controllers/helper';\n\ndotenv.config();\n\nprocess.env.NODE_ENV = 'test';\n\n\nconst { deleteAllUsers, save } = User;\nconst { hashPassword, generateToken } = helper;\n\nchai.use(chaiHttp);\n\ndescribe('auth', () => {\n  describe('POST /api/v1/auth/create-user', () => {\n    const id1 = uuidv1();\n    const obj = generateToken({ sub: id1, role: 'ADMIN' });\n    const token = `Bearer ${obj}`;\n    // before(async () => {\n\n\n    // });\n\n    after(async () => {\n      await deleteAllUsers();\n    });\n    \n    it('should create a new user', async () => {\n      const values = [id1, 'Daniel', 'Mukuna', 'daniel@mukuna.com', hashPassword('DANIEL12345'), 'male', 'admin', 'I.T', 'thika'];\n      await save(values);\n      const objt = { sub: id1, role: 'ADMIN' };\n      const autht = generateToken(objt);\n      const tokent = `Bearer ${autht}`;\n\n      const user1 = {\n        firstName: 'Dante',\n        lastName: 'kamau',\n        email: 'danielmukuna@gmail.com', \n        password: \"DANIEL12345\", \n        gender: 'Male', \n        jobRole: 'admin', \n        department: 'I.T', \n        address: 'Thika'\n      };\n      const res = await chai.request(server)\n        .post('/api/v1/auth/create-user')\n        .set('Authorization', tokent)\n        .set('Content-Type', 'application/json')\n        .send(user1);\n        expect(res).to.have.status(201);\n        expect(res.body).to.be.an('Object');\n        expect(res.body.status).to.be.equals('success');\n    });\n\n    it('should fail if email field is empty', async () => {\n      const  user2 = {\n        firstName: \"Daniel\",\n        lastName: \"Mukuna\",\n        email: \"\", \n        password: \"DANIEL12345\", \n        gender: \"Male\", \n        jobRole: \"admin\", \n        department: \"I.T\", \n        address: \"Thika\"\n      };\n      const res = await chai.request(server)\n        .post('/api/v1/auth/create-user')\n        .set('Authorization', token)\n        .set('Content-Type', 'application/json')\n        .send(user2);\n        expect(res).to.have.status(400);\n        expect(res.body).to.be.an('Object');\n        expect(res.body.status).to.be.equals('error');\n    });\n\n    it('should fail if user supply invalid email', async () => {\n      const user3 = {\n        firstName: \"Daniel\",\n        lastName: \"Mukuna\",\n        email: 'danielmukuna', \n        password: \"DANIEL12345\", \n        gender: \"Male\", \n        jobRole: \"admin\", \n        department: \"I.T\", \n        address: \"Thika\"\n      };\n \n      const res = await chai.request(server)\n        .post('/api/v1/auth/create-user')\n        .set('Authorization', token)\n        .set('Content-Type', 'application/json')\n        .send(user3);\n        expect(res).to.have.status(400);\n        expect(res.body).to.be.an('Object');\n        expect(res.body.status).to.be.equals('error');\n    });\n\n    it('should fail if a duplicate email is found', async () => {\n      const user4 = {\n        firstName: \"Grace\",\n        lastName: \"Kamau\",\n        email: \"daniel@mukuna.com\", \n        password: \"DANIEL12345\", \n        gender: \"feMale\", \n        jobRole: \"admin\", \n        department: \"I.T\", \n        address: \"Thika\"\n      };\n      \n      const res = await chai.request(server)\n        .post('/api/v1/auth/create-user')\n        .set('Authorization', token)\n        .set('Content-Type', 'application/json')\n        .send(user4);\n        expect(res).to.have.status(500);\n        expect(res.body).to.be.an('Object');\n        expect(res.body.status).to.be.equals('error');\n    });\n\n  });\n\n  \n  describe('POST /api/v1/auth/signin', () => {\n    const id2 = uuidv1();\n    before(async () => {\n      const values = [id2, 'Daniel', 'Mukuna', 'daniel@mukuna.com', hashPassword('DANIEL12345'), 'male', 'admin', 'I.T', 'thika'];\n      await save(values);\n    });\n    after(async () => {\n      await deleteAllUsers();\n    })\n    it('should login a user into the application', async () => {\n      const user6 = {\n        email: \"daniel@mukuna.com\",\n        password: \"DANIEL12345\"\n      };\n      const res = await chai.request(server)\n        .post('/api/v1/auth/signin')\n        .set('Content-Type', 'application/json')\n        .send(user6);\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('Object');\n        expect(res.body.status).to.be.equals('success');\n    });\n\n    it('should fail if password is incorrect', async () => {\n      const user7 = {\n        email: \"daniel@mukuna.com\",\n        password: \"DANIEL12574345\"\n      };\n      const res = await chai.request(server)\n        .post('/api/v1/auth/signin')\n        .set('Content-Type', 'application/json')\n        .send(user7);\n        expect(res).to.have.status(400);\n        expect(res.body).to.be.an('Object');\n        expect(res.body.status).to.be.equals('error');\n    });\n\n    it('should fail if email field is empty', async () => {\n      const user8 = {\n        email: \"\",\n        password: \"DANIEL12345\"\n      };\n      const res = await chai.request(server)\n        .post('/api/v1/auth/signin')\n        .set('Content-Type', 'application/json')\n        .send(user8);\n        expect(res).to.have.status(400);\n        expect(res.body).to.be.an('Object');\n        expect(res.body.status).to.be.equals('error');\n    });\n\n    it('should fail if user supply invalid email', async () => {\n      const user9 = {\n        email: \"daniel.mukunacom\",\n        password: \"DANIEL1254345\"\n      };\n      const res = await chai.request(server)\n        .post('/api/v1/auth/signin')\n        .set('Content-Type', 'application/json')\n        .send(user9);\n        expect(res).to.have.status(400);\n        expect(res.body).to.be.an('Object');\n        expect(res.body.status).to.be.equals('error');\n    });\n\n    it('should fail if a password is not supplied', async () => {\n      const user10 = {\n        email: \"daniel.mukunacom\",\n        password: \"\"\n      };\n      const res = await chai.request(server)\n        .post('/api/v1/auth/signin')\n        .set('Content-Type', 'application/json')\n        .send(user10);\n        expect(res).to.have.status(400);\n        expect(res.body).to.be.an('Object');\n        expect(res.body.status).to.be.equals('error');\n    });\n  });\n});\n"],"file":"user.spec.js"}