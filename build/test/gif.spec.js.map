{"version":3,"sources":["../../api/v1/test/gif.spec.js"],"names":["dotenv","config","process","env","NODE_ENV","hashPassword","helper","generateToken","save","User","deleteAllUsers","saveGif","Gif","deleteAllGifs","chai","use","chaiHttp","describe","id1","obj","sub","role","token","before","gifTitle","gUrl","p_id","date","format","userValues","gifValues","after","it","gif1","title","gifUrl","request","server","post","set","attach","field","res","to","have","status","body","data","be","an","equals","gif2","gifUrl2","gif3","gifUrl3","get"],"mappings":"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","sourcesContent":["import chai, { expect } from 'chai';\nimport chaiHttp from 'chai-http';\nimport 'chai/register-should';\nimport dotenv from 'dotenv';\nimport moment from 'moment';\nimport uuidv1 from 'uuid/v1';\nimport server from '../server';\nimport Gif from '../models/gif';\nimport User from '../models/user';\nimport helper from '../controllers/helper';\n\ndotenv.config();\n\nprocess.env.NODE_ENV = 'test';\n\nconst { hashPassword, generateToken } = helper;\nconst { save, deleteAllUsers } = User;\nconst { saveGif, deleteAllGifs } = Gif;\n\nchai.use(chaiHttp);\n\ndescribe('Gifs', () => {\n  const id1 = uuidv1();\n  const obj = generateToken({ sub: id1, role: 'ADMIN' });\n  const token = `Bearer ${obj}`;\n  before(async () => {\n    const gifTitle = 'First gif test value';\n    const gUrl = 'http://res.cloudinary.com/mukuna/image/upload/v1574479438/teamwork-api-gifs/utvsco0pt6suogvzfbu9.gif';\n    const p_id = 'teamwork-api-gifs/utvsco0pt6suogvzfbu9';\n    const date = moment().format('YYYY-MM-DD HH:mm:ss');\n    const userValues = [id1, 'Daniel', 'Mukuna', 'daniel@mukuna.com', hashPassword('DANIEL12345'), 'male', 'admin', 'I.T', 'thika'];\n    const gifValues = [1, gifTitle, gUrl, p_id, date, id1];\n    await save(userValues);\n    await saveGif(gifValues);\n  });\n\n  after(async () => {\n    await deleteAllGifs();\n    await deleteAllUsers();\n  });\n\n  describe('POST /api/v1/gifs', () => {\n    it('should create a new gifs', async () => {\n      const gif1 = {\n        title: 'test title'\n      };\n      const gifUrl = './api/v1/test/211552610004202.gif';\n      const res = await chai.request(server)\n        .post('/api/v1/gifs')\n        .set('Authorization', token)\n        .set('Content-Type', 'application/x-www-form-urlencoded')\n        .attach('image', gifUrl)\n        .field(gif1);\n        expect(res).to.have.status(201);\n        expect(res.body.data).to.be.an('Object');\n        expect(res.body.status).to.be.equals('success');\n    });\n\n    it('should fail if the gifs url is blank', async () => {\n      const gif2 = {\n        title: 'test title'\n      };\n      const gifUrl2 = '';\n      const res = await chai.request(server)\n        .post('/api/v1/gifs')\n        .set('Authorization', token)\n        .set('Content-Type', 'application/x-www-form-urlencoded')\n        .attach('image', gifUrl2)\n        .field(gif2);\n        expect(res).to.have.status(400);\n        expect(res.body.status).to.be.equals('error');\n    });\n\n    it('should fail if the gifs title is blank', async () => {\n      const gif3 = {\n        title: ''\n      };\n      const gifUrl3 = './api/v1/test/211552610004202.gif';\n      const res = await chai.request(server)\n        .post('/api/v1/gifs')\n        .set('Authorization', token)\n        .set('Content-Type', 'application/x-www-form-urlencoded')\n        .attach('image', gifUrl3)\n        .field(gif3);\n        expect(res).to.have.status(400);\n        expect(res.body.status).to.be.equals('error');\n    });\n  });\n\n  describe('GET /api/v1/gifs', () => {\n    it('should fetch all gifs', async () => {\n      const res = await chai.request(server)\n        .get('/api/v1/gifs')\n        .set('Authorization', token);\n        expect(res).to.have.status(200);\n        expect(res.body.data).to.be.an('array');\n        expect(res.body.status).to.be.equals('success');\n    });\n  });\n\n  describe('GET /api/v1/gifs/:gifId', () => {\n    it('should fetch get one gif', async () => {\n      const res = await chai.request(server)\n        .get('/api/v1/gifs/1')\n        .set('Authorization', token);\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('object');\n        expect(res.body.status).to.be.equals('success');\n    });\n\n    it('should fail if gif does not exist', async () => {\n      const res = await chai.request(server)\n        .get('/api/v1/gifs/5')\n        .set('Authorization', token);\n        expect(res).to.have.status(500);\n        expect(res.body).to.be.an('Object');\n        expect(res.body.status).to.be.equals('error');\n    });\n  });\n\n  describe('DELETE /api/v1/gifs/:gifId', () => {\n    it('should delete one gif', async () => {\n      const res = await chai.request(server)\n        .delete('/api/v1/gifs/1')\n        .set('Authorization', token)\n        .set('Content-Type', 'application/json');\n        expect(res).to.have.status(200);\n        expect(res.body).to.be.an('Object');\n        expect(res.body.status).to.be.equals('success');\n    });\n\n    it('should fail if gif does not exist', async () => {\n      const res = await chai.request(server)\n        .delete('/api/v1/gifs/5')\n        .set('Authorization', token);\n        expect(res).to.have.status(500);\n        expect(res.body).to.be.an('Object');\n        expect(res.body.status).to.be.equals('error');\n    });\n  });\n});\n"],"file":"gif.spec.js"}